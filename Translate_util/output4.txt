triggered. Sensor polling scheduler dynamically calculates evaluation and polling intervals for each trigger condition and their sensors. The sensor polling scheduler consists of a sensor value predictor, a CEI (Condition Evaluation Interval) function, and a SPI (Sensor Polling Interval) function. The sensor value predictor predicts the range of sensor values after a given time period with previous sensing data, and provides the probability of value gradients over time gradients (pi(sjt)). Interacting with the sensor value predictor, the CEI function calculates evaluation intervals of each trigger condition. From the evaluation intervals of trigger conditions, the SPI function calculates polling intervals of each sensor. Whenever the sensor manager updates a sensing value, the sensor polling scheduler evaluates all trigger conditions that use the sensing value, and also invokes the CEI function to update the evaluation intervals of trigger conditions. Then, the sensor polling scheduler invokes the SPI function to update polling intervals of all the sensors that are used in the trigger conditions. Section IV will describe details about how the sensor polling scheduler achieves efficient evaluation and polling intervals for trigger conditions and sensors. Sensor manager manages connectivity of sensors and their sensing data. As Hasenfratz et al. [14] mentioned, the sensor manager acquires sensing data with pulling. At the scheduled polling time, the sensor manager requests sensing data from its corresponding sensor and receives the data. The sensor manager also keep the history of sensing data for the sensor polling scheduler to predict sensing values. Actuator manager manages connectivity of actuators and sends their operations to actuators if an applet satisfies its trigger conditions. Based on an observation result that the sensing values have repeated patterns, this work designs a maximum normalized sensor value gradient model (MNSVG model) that calculates a probability of a maximum normalized sensor value gradient after a given time gradient (pi(sjt)) using the history of sensing data. In the current sensor polling scheduler implementation, the CEI function uses the MNSVG model to analyze the possible range of a sensor value after a given time period and to calculate evaluation intervals of trigger conditions. Here, since the CEI function uses the prediction model as a black box, the RT-IFTTT framework can use other sensor value prediction models [15¨C18] instead of the MNSVG model. The sensor value predictor generates a MNSVG model for a sensor, si, in three steps. First, the predictor calculates maximum normalized sensor value gradients over time gradients at a certain time point, t0, by si(t = t ?? t0) = maxt0t jsi( ) ?? si(t0)j jsi(t0)j Second, the predictor generates a multiset, Si;t, that represents a distribution of maximum normalized sensor value gradients over different time points from ts to tf for a certain time gradient, t. Si;t = fsi(tj = (tj + t) ?? tj)jts  tj  tf g Finally, the predictor generates a probability function about a maximum normalized sensor value gradient after a given time gradient, pi(sjt). psi(sjt) = jfsjs = s; s 2 Si;tgj jSi;tj The probability function will be used for the CEI function to analyze the possible ranges of a sensor value over different time gradients. IV. PROBLEM STATEMENT AND SOLUTION The sensor polling scheduler in the RT-IFTTT framework dynamically calculates evaluation and polling intervals for each trigger condition and their sensors. This section formally defines a problem about the goal of the sensor polling scheduler (Section IV-A), and provides a solution with a proof (Section IV-B). A. Problem Statement To support real-time execution of an applet, the RT-IFTTT framework should execute various tasks such as polling sensors, evaluating trigger conditions and taking actions before its deadline. Figure 6(a) illustrates the tasks for a single-sensor applet at a timeline. For an applet aj with a relative deadline Daj , the framework polls the sensor and updates its value si at time points tsi with flexible intervals Isi . Then, the framework evaluates trigger conditions and takes actions at time point tAa j if an event occurs at tEa j . Table I summarizes the notations used in this section.For the framework to meet the deadline of the applet, its response time Raj should be shorter than the deadline Daj . Raj = tAa j ?? tEa j  Daj However, the framework hardly know the exact time point of the event occurrence tEa j . Since the event did not occur at the 