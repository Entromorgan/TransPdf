Abstract¡ªWith a simple ¡°If This Then That¡± syntax, IoT frameworks such as IFTTT and Microsoft Flow allow users to easily create custom applets integrating sensors and actuators. Users expect appropriate actions to be taken within a certain latency in response to sensor value changes while the sensors usually have limited battery power. Therefore, reading the sensor values at the right time point is crucial for the IoT frameworks to support real-time responses of the applets while saving battery lives of sensors. However, existing IoT frameworks periodically read the sensor data with fixed intervals without reflecting current sensor values and trigger conditions of applets, so the intervals are either too long to meet the real-time constraints, or too short wasting batteries of sensors. This work extends the existing IFTTT syntax for users to describe real-time constraints, and proposes the first real-time IoT framework with trigger condition-aware flexible polling intervals, called RT-IFTTT. RTIFTTT analyzes current sensor values, trigger conditions and constraints of all the applets in the framework, and dynamically calculates the efficient polling intervals for each sensor. This work collects real-world sensing data from 10 physical sensors for 10 days, and shows that the RT-IFTTT framework with the proposed scheduling algorithm executes 100 to 400 applets according to user-defined real-time constraints with up to 64.12% less sensor polling counts compared to the framework with the fixed intervals.  In the Internet of Things (IoT) environments, networked sensors and actuators provide various services that assist daily lives of users, interacting with the physical world. To satisfy various user demands, recent IoT frameworks such as IFTTT [1] and Microsoft Flow [2] allow users to write their own custom service as an applet with a simple ¡°If This Then That¡± syntax. Fig. 1 illustrates an example smart home IoT framework and its custom applets. In the example, the custom applets describe several operational rules such as ventilating a room if sunny, closing blinds if too bright, turning on/off a bulb if dark/bright, and closing a window if rainy. Given the applets, the IoT framework periodically reads current temperature, humidity, and illuminance values from connected sensors, and executes described actions in the applets if their trigger conditions are true. Here, some of the applets are time critical. For example, if the framework does not close the window on time when it is rainy, the inside of the house will get wet. If the applets include more time critical services like health monitoring and disaster response, their real-time responses become more important [3¨C6]. To support real-time responses of the applets, the IoT frameworks should read sensor data at the right time point.  The response time is from when the physical event occurs to when the actuators react. To react to the event on time, the IoT framework should first notice the occurrence of the event from the sensor data. However, IoT sensors generally have limited battery power, so the sensors measure the environments only at the scheduled time and hibernate after the measurement. If the interval between each measurement is too long, the IoT frameworks cannot take actions of the applets within the real-time constraints. On the other hand, if the interval is too short, each sensor unnecessarily wastes its battery power. As results, to maximize battery lifetimes of the sensors while supporting real-time responses, the IoT frameworks should read the sensor values with an appropriate interval that reflects real-time constraints. However, existing IoT frameworks [1, 2, 7, 8] periodically read the sensor data with fixed intervals regardless of realtime constraints. Moreover, the frameworks do not provide any interface about real-time constraints, so there is no way for users to specify a deadline of each applet. For example, the IFTTT syntax consists of only trigger conditions and actions without real-time constraints, and the IFTTT framework polls all the connected sensors every 15 minutes [1]. The IFTTT framework provides real-time APIs that allow a sensor to notify the framework of any change, and reduces the response time of the applets. However, since the real-time APIs make the sensor send notifications for every change, the sensor sends unnecessary notifications that do not affect trigger conditions, wasting its battery power. Publish-and-subscribe messaging  protocols [9, 10] that many IoT frameworks [2, 7, 8] adopt also require a sensor to publish its change without considering 