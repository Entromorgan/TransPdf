changing sensor values, programmers can use a more powerful probabilistic model instead of the MNSVG model in the RTIFTTT framework. 3) Response time analysis: This work calculates response times for each detected event by subtracting the event triggered time and the actual event occurrence time, and takes an average of them. Figure 9(c) shows the average response time of each algorithm. The results show that RT-IFTTT has 2.63 times faster response time than Fix-Opt, but 4.04 times slower response time than Fix-Con. VI. RELATED WORK Real-time scheduling for IoT environments: Scheduling each task to meet its deadline has been a widely-discussed issue in real-time systems [11每13, 19每24]. Kang et al. [19] propose a real-time database model which manages deadline miss ratio and sensor data freshness, and Kang [20] improves the model to achieve lower power consumption. Chen [21]considers sporadic tasks on real-time embedded systems, and explores task set synthesis scheduling while satisfying time constraints. Gopalakrishnan [22] suggests an optimal scheduler that determines the polling period by the existence of the previous event, and balances both data freshness and energy costs. Unlike the previous work, this work targets IoT frameworks where a server manages a number of applets with different event trigger conditions and checks the trigger conditions repetitively, and the characteristics of the system pose different challenges. Recent works [11每13] have proposed data acquisition scheduling algorithms for normally-off sensors to support real-time decision making in the IoT environments. Kim et al. [12] propose an algorithm that finds the optimal order of acquisition of data items considering both decision validity (data freshness) and schedulability constraints. However, their work pays little attention to response time on actual event occurrence, while this work tries to reduce the response time by dynamically adjusting polling intervals. Nath [24] introduces an acquisitional context engine (ACE), a middleware for energy-efficient acquisition of context information (attributes) from sensors. Based on the key observation that context attributes are correlated each other, ACE tries to reduce sensing cost by inferring one context attribute from other context attributes. This work focuses on avoiding acquisition of a requested value with inference caching and speculative sensing, not on scheduling when to acquire data. Sensor data prediction: Sensor data prediction plays a crucial role in the RT-IFTTT framework to correctly calculate an appropriate sensor polling interval. There exist some studies [15每18] that use autoregressive (AR) model or its derivation. Especially Raza et al. [18] propose derivativebased prediction that samples least amount of data to predict. Wei et al. [25] combine grey model and Kalman Filter to ensure high prediction accuracy. Deshpande et al. [26] use an approximation model with correlated data and scheduled queries with the model to meet the deadline. The prediction models can be used in the RT-IFTTT framework instead of the MNSVG model because the CEI function uses the prediction model as a black box. Here, some work additionally needs a synchronization of a prediction model between a sensor and a server [17], or requires an assumption that a sensor pushes data and its prediction model [25]. Publish-and-subscribe or request-and-receive: Many IoT frameworks [2, 7, 8] assume a publish-and-subscribe message passing model [9, 10], but Hasenfratz et al. [14] point out that the publish-and-subscribe message passing model causes unnecessary energy consumption, and the request-and-receive model is more energy efficient. However, the request-andreceive model may increase the latency of data acquisition. While exploiting the energy efficient data acquisition strength, this work solves the latency problem by introducing trigger condition-aware flexible polling intervals. By predicting sensor values in the near future, this work dynamically increases/ decreases sensor polling intervals when trigger conditions become unlikely/likely triggered. VII. CONCLUSION This work proposes RT-IFTTT, the first real-time IoT language and its framework that uses trigger condition-aware flexible sensor polling intervals. With the RT-IFTTT language, users can develop their applets with real-time constraints. Given applets, the RT-IFTTT framework finds an efficient sensor polling interval for each sensor, reflecting current sensor values, their related trigger conditions, and real-time constraints, with a sensor value prediction model, a condition 