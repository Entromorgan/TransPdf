trigger conditions of target applets, so the sensor suffers from the same unnecessary notification problem like the real-time APIs of the IFTTT framework. This work proposes RT-IFTTT, the first real-time IoT language and its framework that uses trigger condition-aware flexible sensor polling intervals. The RT-IFTTT language extends the existing IFTTT syntax, and allows users to specify real-time constraints for their applets. Its compiler analyzes the applets and extracts their trigger conditions, actions and deadlines. The RT-IFTTT framework consists of an applet manager and a sensor polling scheduler. The applet manager analyzes prerequisite relations among applets, and classifies an applet as an inactive applet if at least one of its prerequisites is not triggered. The sensor polling scheduler dynamically calculates evaluation and polling intervals for each trigger condition and related sensors, reflecting their current sensor values and corresponding trigger conditions. This work implements the RT-IFTTT framework and installs 10 physical sensors that consist of 2 sets of temperature, humidity, UV Index, ambient light, and pressure sensors. The RT-IFTTT framework collects sensing data from the sensors for 10 days. To deeply evaluate the proposed scheduler in the RT-IFTTT framework, this work also implements three other schedulers including fixed and random interval schedulers, and executes the schedulers with the collected data. The evaluation results show that the RT-IFTTT framework with the proposed scheduling algorithm executes 100 to 400 applets with up to 64.12% less sensor polling counts compared to the framework with the fixed intervals. The contributions of this paper are:  The first real-time IoT framework with flexible polling intervals, called RT-IFTTT  The RT-IFTTT syntax and compiler that allow users to write their own IoT applets with real-time constraints  The applet manager that analyzes prerequisite relations among trigger conditions  The flexible polling interval model and its scheduler that dynamically calculate efficient polling intervals for each sensor reflecting the current sensor values and trigger conditions.  While providing real-time responses is important for many IoT services such as health monitoring, disaster response, and home automation, existing IoT frameworks [1, 2, 7, 8] do not effectively and efficiently support real-time execution of the services. First, the frameworks do not provide real-time interfaces for users, so users cannot specify real-time constraints for their applets. There exist some real-time interfaces like the IFTTT real-time APIs [1], but the interfaces are about forcing instance notification of sensing value changes, not describing real-time constraints for their applets. As a result, the frameworks schedule their applets without considering their deadlines. To fully support real-time execution of the applets, the IoT frameworks should provide an interface for users to define their own real-time constraints for each applet. Moreover, the frameworks [1, 2, 7, 8] collect sensor data without reflecting the current sensor values and trigger conditions of the applets. To support instant responses for the applets, the frameworks can request the connected sensors to notify their changes using the real-time APIs [1] and publishand- subscribe messaging protocols [9, 10]. However, since the sensors do not know the trigger conditions of applets, the sensors keep sending the sensing values whenever changed although the changed values do not affect trigger conditions. For example, during the night time, outdoor thermometers keep sending their temperature changes like Fig. 2(a), but the temperatures do not affect any trigger condition of the applets in Fig. 1. To efficiently collect sensor data without unnecessary data communication, either the sensors should send their data that affect trigger conditions of the applets, or the IoT frameworks should poll the sensors reflecting the current sensor values and the trigger conditions. Since the IoT sensors are generally too lightweight to manage various trigger conditions, this work focuses on the efficient polling scheduling of IoT frameworks. Moreover, since capturing changes of discrete sensor values is relatively simple through notification, this work focuses on continuous sensor values like temperature, humidity, and illuminance. Recent works [11¨C13] have proposed data acquisition scheduling algorithms from normally-off sensors to support real-time decision making in the IoT environments. To make a decision with valid sensing data, the proposed algorithms 