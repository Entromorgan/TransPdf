changes its polling intervals reflecting the current sensor value and the threshold value. When the sensor value reaches the threshold value of the event, RT-IFTTT reduces the sensorvalue is far from the threshold, RT-IFTTT increases the polling intervals. Here, at 6000 seconds, RT-IFTTT frequently polls the sensor because the sensor value reaches the threshold value although the event does not occur. Since RT-IFTTT dynamically changes the polling intervals according to the current sensor value and the threshold value, the RT-IFTTT framework can reduce the number of polling requests while keeping its deadline miss ratio small. C. Multi-applet Results This work compares the data scheduling algorithm of RTIFTTT with three baseline algorithms (Fix-Opt, Fix-Con, and Random) described in Section V-A in terms of communication counts, miss ratio, and response time for multiple applets. The simulation uses randomly generated 100, 200, 300 and 400 applets with two sub-conditions based on the data set. The condition values in the applets are randomly selected within a certain range, considering the maximum and minimum values of each data set. For example, the value of the humidity sensor is absolutely between 0% and 100%, so the simulator sets comparison target values of the humidity sensor as any integer value between 0 and 100. Also, relative deadlines for each applet are chosen from a finite set Ds = f30; 60; 300; 600g. The simulation uses a constant miss ratio e = 0:10 for all the applets. Due to the randomness in generating applets, trigger conditions of some applets can be always true. The simulator also calculates the ground truth values about the actual event occurrences. The ground truth includes the specific times at which events have occurred. To prevent from triggering an event multiple times in a short period due to the fluctuating sensor values, the simulator utilizes a threshold interval, which restricts re-trigger of events within the threshold interval. In other words, if the time gap between two events is too short, the simulator considers the two events as one event. With this true event history, this work evaluates the polling scheduling algorithm of RT-IFTTT and the three baseline algorithms. 1) Communication analysis: The communication count between sensors and a server is one of the crucial metrics in evaluating IoT frameworks because the communication count significantly affects the battery lifetime of the sensors. Figure 9(a) shows the communication counts of the four algorithms. Each communication count indicates the total number of data polling requests between a server and sensors. Since Fix-Opt and Fix-Con use a fixed polling period, their communication counts do not change over the different numbers of the applets. However, the data scheduling algorithm of RT-IFTTT utilizes flexible polling intervals. Since the intervals are influenced by the applet conditions, the algorithm shows different communication counts over the different numbers of the applets. Moreover, RT-IFTTT frequently polls sensors to meet the deadlines, the communication counts of RT-IFTTT are larger than the counts of the random polling. Our polling scheduling algorithm reduces the number of polling requests by 39.47% on average and up to 64.12% for 100 applets compared to the Fix-Con algorithm. 2) Miss ratio analysis: Miss ratio is defined as the number of correctly detected events over the total number of events and Figure 9(b) shows the result of evaluation on miss ratio. The Fix-Con algorithm obtains near 0 miss ratio. The algorithm sometimes misses an event occurrence because sensor data may slightly fluctuate near the decision boundary. As expected, the Fix-Opt algorithm hardly catches events for the applets of which relative deadlines are shorter than their polling periods. The random algorithm cannot also catch the events because it sets its polling intervals regardless of the relative deadlines. Therefore, the Fix-Opt and random algorithms show high miss ratios, which are around 65.6% and 55.5%. The actual miss ratio of our data scheduling algorithm is 7.62% on average, outperforming the Fix-Opt and random algorithms by 8.96 times and 7.58 times respectively. Though the evaluation results fully satisfy the miss ratio condition, the current algorithm may not meet the predefined miss ratio if sensor values are dramatically changing. This is because the proposed probabilistic model for the value prediction described in Section III-C assumes that sensor values periodically and slowly change in a regular pattern. To predict irregularly 